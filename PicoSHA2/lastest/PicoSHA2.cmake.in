cmake_minimum_required(VERSION 3.10)
project(PicoSHA2--install NONE)

#==========================================
#Header
#==========================================
find_package(PicoSHA2  QUIET)
if(NOT PicoSHA2_FOUND AND NOT PicoSHA2_FIND_VERSION_EXACT)
    include(ExternalProject)
    if(NOT WIN32)
 # Linux or OSX Setting
        ExternalProject_Add(
        PicoSHA2
        GIT_REPOSITORY https://github.com/okdshin/PicoSHA2.git
        #GIT_TAG 
        SOURCE_DIR repo
        #CMAKE_ARGS "-DCMAKE_INSTALL_PREFIX=$ENV{HOME}/.cppm/local "
        #CONFIGURE_COMMAND 
        #BUILD_COMMAND 
        #INSTALL_COMMAND 
        #BUILD_IN_SOURCE true
        )
    else(NOT WIN32)
 # Windows Setting
        ExternalProject_Add(
        PicoSHA2
        GIT_REPOSITORY https://github.com/okdshin/PicoSHA2.git
        #GIT_TAG 
        SOURCE_DIR repo
        #CMAKE_ARGS "-DCMAKE_INSTALL_PREFIX=$ENV{HOME}/.cppm/local "
        #CONFIGURE_COMMAND 
        #BUILD_COMMAND 
        #INSTALL_COMMAND 
        #BUILD_IN_SOURCE true
        )
    endif(NOT WIN32)
    set(CMAKE_INSTALL_PREFIX $ENV{HOME}/.cppm/local)
    set(cppkg_path "$ENV{HOME}/.cppm/repo")
    add_library(picosha2 INTERFACE)
    add_dependencies(picosha2 PicoSHA2)
    target_include_directories(picosha2
        INTERFACE
            $<BUILD_INTERFACE:repo>
            $<INSTALL_INTERFACE:include>
    )
    install(FILES repo/picosha2.h DESTINATION include)
    install(TARGETS picosha2 EXPORT picosha2-targets
        ARCHIVE DESTINATION lib 
        LIBRARY DESTINATION lib
        RUNTIME DESTINATION bin
    )
    install(EXPORT picosha2-targets
        FILE picosha2-config.cmake
        NAMESPACE picosha2::
        DESTINATION lib/cmake/picosha2
    )

endif()
#==========================================
#Footer
#==========================================
